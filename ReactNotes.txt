 React (the library) splits its core logic across two main packages:
 > The main react package
    ->  Need for React features like JSX or state
    ->  It's this package that creates this virtual DOM 
    ->  Derives the current UI state.
 > The react-dom package
    ->  To manipulate the DOM with React
    ->  It's the react-dom package that will produce the actual DOM
    ->  The  react-dom/client part of that package, acts as a "translation bridge" between your React code, the internally generated virtual DOM,
        and the browser with its actual DOM that needs to be updated. 
        
        
 > This split exists because you can also use React with other target environments. A very popular and well-known alternative to the DOM 
   (i.e., to the browser) would be React Native, which allows developers to build native mobile apps with help of React. 
   With React Native, you also include the react package into your project, but in place of react-dom, you would use the react-native package. 
   In this book, "React" refers to both the react package and the "bridge" packages (like react-dom).

 > The react-router-dom
   -> React can be used to handle URL path changes 
   -> Update the parts of the page that need to be updated in order to reflect the new page that should be loaded. 
   This functionality is called "routing"
   [ It is important to understand that URL changes are handled in such a way that new page is not rendered. The same SINGLE page (index.jsp)
     is updated with contents of new URL ]
     
 > Declarative programming is like describing the picture, where imperative programming is the instruction for painting that picture.
   -> SQL query - SELECT * FROM Employees   
      Here we are defining we need every Employees detail not how to get the Employees. we aren't caring about any complex data structure the database 
      is using to store the data.
      
   -> CSS is a nice example of declarative programming, In CSS we are actually defining how the element should look like and the browser takes care of 
      implementing that for you.
      
   -> Declarative programming in React
       In react, You make interactive UIs by changing the STATE of the component and React takes care of updating the DOM according to it.
       In react the DOM is declarative. This means we never interact with DOM, the UI is updated when we change the state.
       
      In declarative programming, you describe the program/UI/picture and someone else React/Browser/OS implements it.
       
    -> Imperative - you instruct a machine what to do step by step. Example: assembly language.
       Declarative - you instruct a machine what you want to get and it supposes to figure it how to do it. Example: SQL.
       
  +++++++++++++++++++++++++++++++++     
  -> Web application is designed for interaction with end users. Website basically contains static content. Web applications are websites with functionality 
     and interactive elements.
     
  -> Client side rendering (CSR)
     -> The browser executes and renders the html, which is in java script . 
     -> If you see page source, you don't see any code .
     -> It is slow rendering at first
     -> create-react-app is example
     ->  search engines will not detect sites with CSR since all code is rendered at client side. Search engines browse server side 
     
  -> Server side rendering (SSR)
     -> The server itself will send the html code and browser renders that 
     -> If you see page source, you see any code .
  
